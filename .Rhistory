###Exercise 19.
The next exercise builds a report worthy table.
In order to complete the exercise replace the three blanks with the proper inputs needed to create a table using `chem_table()` and the data frame named `Iron_dataframe` (Make sure to remember capitalization).
<!--
THis function doesnt work
```{r Report_Quality_Table-check, exercise.setup = "dataframe"}
capitalization <- function(USER_CODE) {
code <- for_checkr(USER_CODE)
result <- check_blanks(code,
quote(..chem..(..data.., caption= "Table 1. The caption will go here.")),
insist(same_name(chem, "chem_table"), message="Make sure that you are using the correct table creating function"),
insist(same_name(data, "Iron_dataframe"), message = "Make sure you are spelling Iron_dataframe correctly and that you are capitalizing the `I`."),
passif(TRUE, return(message = "Great Job!")))
}
capitalization(USER_CODE)
```
-->
```{r Report_Quality_Table, exercise= TRUE, exercise.setup = "dataframe2", exercise.cap= "Report Quality Table", exercise.completion=TRUE}
________(________,________= "Table 1. The caption will go here.")
```
Once finished click **Run Code** to see the finished table and then click **Solution** to see a possible way of completing the exercise.
<!--Decided not to use a code checking function here. Could be added later if needed. Should be a simple check_blanks function. -->
```{r Report_Quality_Table-solution}
chem_table(Iron_dataframe, caption= "Table 1. The caption will go here.")
```
##7.2 Creating a Scatter Plot
Just as there are many different ways to create a table there are even more ways to create a scatter plot.
Reed Chemistry currently uses `chem_scatter(data.frame, xvar, yvar, xlab, ylab, intercept)` because it combines many complex `ggplot2` functions to create one concise function.
In order to use `chem_scatter()` there are six necessary inputs:
1. data = Data_frame_Name
2. xvar = Name_of_column_in_Data_frame
3. yvar = Name_of_another_column_in_Data_frame
4. xlab = "String with the label for the x variable (with units)",
5. ylab = "String with the label for the y variable (with units)",
6. intercept = an integer
####This is an example of a scatter plot output:
```{r}
chem_scatter(data = Iron_dataframe,
xvar = Iron,
yvar = Absorbance,
xlab = "[Iron](µM)",
ylab = "Absorbance at 508 nm",
intercept = 0)
```
### Exercise 20.
This exercise recreates the example scatter plot and checks your knowledge on R syntax.
(@) Surround the inputs with the `chem_scatter()` function (using the first and last blanks)
- Hint: Make sure to enclose the function inputs with parentheses
(@) Fill in the remaining six blanks with the inputs
(@) Check to make sure that each of the input phrases `input= something` is separated by a comma. (*The last phrase should not be followed by a comma*)
- Hint: There are 2 commas missing
(@)  Make sure that quotation marks are around both of the strings
- Hint: One of the strings is missing a set of quotation marks
(@) Check to see if the Scatter Plot code will run by clicking the **Run Code** button
<!-- Here is an attempted checking code, Decided not to use a checkr for the time being. Might decide to add one later if I can figure out how to write a check blanks code for a long code chunk
```{r Scatter-check, echo=FALSE}
Whynot <- function(USER_CODE){
code <- for_checkr(USER_CODE)
message1 <- "You didn't do the thing!"
message2 <- "You did the thing!"
message3 <- "Great Job! Your sig figs are correct"
result <- check_blanks(code,
quote({..chem_scatter..;..equals.. = Iron_dataframe; ..xvar.. = Iron; ..yvar.. = Absorbance; ..xlab.. = "[Iron] (µM)"; ..ylab.. = "Absorbance at 508 nm"; ..intercept.. "0"; ..parenthesis..}),
insist(equals == "=" ,message2),
passif(TRUE))
if(failed(result))
return(result)
}
Whynot(USER_CODE)
```
-->
```{r Scatter, exercise= TRUE, exercise.setup = "dataframe2", exercise.cap= "Scatter Plot", exercise.completion=TRUE}
____________ ____ = Iron_dataframe
____ = Iron,
____ = Absorbance,
____ = "[Iron] (µM)"
____ = Absorbance at 508 nm,
___________ = 0 __
```
```{r Scatter-solution}
chem_scatter(data = Iron_dataframe,
xvar = Iron,
yvar = Absorbance,
xlab = "[Iron](µM)",
ylab = "Absorbance at 508 nm",
intercept = 0)
```
##7.3 Extracting Data from Scatter Plots
After creating a scatter plot the next step is to extract data from the line of best fit in order to find the equation of the line.
This is done using the `lm(yvar ~ xvar + intercept, data = Data_Frame)` and `summary(fit)` functions.
In order to use the `lm()` (linear model) function there are four inputs:
1. `yvar` must be replaced with the name of the y variable.
2. the `xvar` must be replaced with the name of the x variable.
3. the `intercept` must be replaced with the integer value of the intercept
4. `data = Name_of_Data_Frame`
####The output of this function is a bit hard to read but contains a lot of useful information:
```{r}
fit <- lm(Absorbance ~ Iron + 0, data = Iron_dataframe)
summary(fit)
```
For the purposes of general chemistry, there are two values generally needed from this output: slope and the standard error
To find these variables look under *Coefficients*.
*Estimate* is the slope and *Std. Error* is the standard error.
**Note that the standard error will never have more than one significant figure**
### Exercise 21.
This next exercise will extract the line of best fit from the previously made scatter plot using the data frame `Iron_dataframe`, xvar= `Iron`, yvar= `Absorbance`, and intercept = `0`.
1. Assign the `lm()` function to a vector (ex. fit)
2. Insert the `yvar ~ xvar + intercept` piece of the function.
3. Insert the `data= Name_of_Data_Frame` piece of the function.
4. Call the `summary()` function on the vector that you assigned the linear model function to.
- Hint: Make sure to do this on a new line of code.
5. Click **Run Code** and then click **Submit Answer** when finished.
```{r Line-check, exercise = FALSE, exercise.setup = "dataframe2", exercise.caption = "Line if Best Fit", error = FALSE}
Iron <- c(0,.717,1.43,3.5,7.17)
Absorbance <- c(0,.085,0.17,0.41,0.85)
Iron_dataframe <- data.frame(Iron, Absorbance)
check_line8 <- function(USER_CODE) {
code <- for_checkr(USER_CODE)
sponge1 <- "The answer is correct, Great Job!"
message2 <- "You forgot to print."
message3 <- "You switched the xvar and yvar"
message4 <- "Make sure to add in the names of the variables, don't just use the template."
result <- line_where(code, passif(F=="lm", sponge1))
return(result)
}
check_line8(USER_CODE)
```
```{r Line, exercise=TRUE, exercise.setup = "dataframe2", exercise.caption= "Line of Best Fit", error=FALSE}
```
If you get stuck click **Solution** to see one way of completing this exercise.
```{r Line-solution, exercise = FALSE,exercise.setup = "dataframe2", exercise.caption = "Line if Best Fit", error = FALSE}
fit <- lm(Absorbance ~ Iron + 0, Iron_dataframe)
summary(fit)
```
### Exercise 22.
```{r equation, echo=FALSE}
question("What is the slope and standard error of the line from Exercise 36? ",
answer("Slope= .118300 Standard Error= .000277", message= "Close, but remember there is only one sig fig on standard error!"),
answer("Slope= .0003 Standard Error= .1183", message= "The sig figs look great, but the slope and standard error are switched"),
answer("Slope= .1183 Standard Error= .0003", correct = TRUE, message="Great Job with Sig Figs and finding the answer"),
answer("Slope= .00027 Standard Error= .118300", message= "The slope and standard error are switched, and there should only be one sig fig for standard error"), allow_retry=TRUE, random_answer_order=TRUE)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```
##8.0 Statistical Analysis of Data.
Precursors to Chapter 8:
1. Data Frame Creation
2. Vector Assignment
3. Mathematical Manipulation of Data
4. Report Quality Table
This chapter is quite similar to Chapter 5: Mathematical Manipulation, both chapters take raw data and output useful new data information.
Statistical Analysis is a very broad term; this chapter will focus on the statistics that are most useful for General Chemistry at Reed.
Before starting any sort of statistical analysis make sure to input the raw data into R as a data frame using the concatenate `c()` and data frame `data.frame()` functions.
####For this chapter we will be using a data frame from a lab on crystal synthesis and composition:
```{r Green}
#Creating a Data Frame
Potassium_mass <- c(26.1, 25.2, 24.09, 22.5, 25.8, 24.14, 23.05)
Iron_mass <- c(10.6, 10.8, 9.85, 11.6, 10.05, 10.8, 11.26)
Crystal <- data.frame(Potassium_mass,Iron_mass)
Crystal
```
##8.1 Function based Statistics
One of the primary benefits to using R instead of a standard TI Graphing calculator is that R allows you to put new data points into calculations someone else has already completed.
There are four main vectors that need to be assigned for general statistical analysis:
1. A list of data (data)
2. The average of the data (avg)
3. The standard deviation of the data (sd)
4. The number of data entries (n)
The reason these functions are great to start with is that each of them has a concise previously written function that can be used to calculate and assign them:
1. Input the data vector into `mean()` and assign the function to a vector
2. Input the data vector into `sd()` and assign the function to a vector
3. Input the data vector into `length()` and assign the function to a vector
Note that assigning these vectors won't show a visible output, in order to see the output either print the value, create a table or assign it to a data frame.
Here is a data frame output from these four vectors in regards to Potassium
```{r green_function_stats}
# Mean, SD, n
Potassium_mean <- mean(Potassium_mass)
Potassium_sd <- sd(Potassium_mass)
Potassium_n <- length(Potassium_mass)
Crystal_functioning_stats <- data.frame(Potassium_mean,Potassium_sd, Potassium_n)
Crystal_functioning_stats
```
###Exercise 23.
Create a similar data frame using the statistics in regards to Iron instead.
Fill in the blanks with the correct functions and vectors.
*Start by concatenating the mass of Iron data.*
```{r Iron_function_stats, exercise=TRUE}
Iron_mass <- ____(10.6, 10.8, 9.85, 11.6, 10.05, 10.8, 11.26)
Iron_mean <- __(___________)
Iron_sd <- ____(___________)
Iron_n <-  ____(___________)
Crystal_Iron_stats <- __________ (_______, ___________, ______________)
Crystal_Iron_stats
```
```{r Iron_function_stats-solution}
Iron_mass <- c(10.6, 10.8, 9.85, 11.6, 10.05, 10.8, 11.26)
Iron_mean <- mean(Iron_mass)
Iron_sd <- sd(Iron_mass)
Iron_n <-  length(Iron_mass)
Crystal_Iron_stats <- data.frame(Iron_mass, Iron_sd, Iron_n)
Crystal_Iron_stats
```
Once finished, check your answer against the solution and **Run Code**
```{r sigcheckagain}
question("How many sig figs should standard deviation have?",
answer("Depends on the precision of the instruments", message="No this is not the case for error."),
answer("2", message = "No, 2 sig figs is the rule for RSD not SD. SD is a way of recording error, try again."),
answer("1", correct=TRUE,message="Great Job, sd falls under error rules and only has 1 sig fig."),
random_answer_order = TRUE,
allow_retry = TRUE)
```
##8.2 Calculating Statistics
After creating the four basic R vectors needed (data, avg, sd, n) it is possible to use the vectors to calculate statistics that don't have a previously made calculation function.
For this section, we will calculate Relative Standard Deviation.
RSD doesn't currently have a function that is used to calculate it. Instead, we will input the formula into R and replace the variables in the formula with our previously assigned vector names.
The formula for RSD is
`RSD <-(SD/Avg)*100`
###Exercise 24.
Calculate the RSD of Iron using Iron_mean and Iron_sd.
```{r Ironset}
Iron_mass <- c(10.6, 10.8, 9.85, 11.6, 10.05, 10.8, 11.26)
Iron_mean <- mean(Iron_mass)
Iron_sd <- sd(Iron_mass)
Iron_n <-  length(Iron_mass)
Crystal_Iron_stats <- data.frame(Iron_mass, Iron_sd, Iron_n)
```
```{r Iron_RSD-solution}
RSD <- (Iron_sd/Iron_mean)*100
RSD
```
```{r Iron_RSD, exercise=TRUE, exercise.setup="Ironset"}
RSD <-
RSD
```
Once finished, check your answer against the solution and **Run Code**
```{r sigcheckagainandagain}
question("How many sig figs should relative standard deviation have?",
answer("Depends on the precision of the instruments", message="No this is not the case for relative standard deviation"),
answer("2", correct=TRUE, message = "Great Job, RSD is the exception to the error rule and has 2 sig figs!"),
answer("1", message="No, RSD is the exception to the error rule and does not have 1 sig fig."),random_answer_order = TRUE,
allow_retry = TRUE)
```
##8.3 Multiple Input Statistics
Confidence Intervals.
Confidence intervals are a bit complicated because they require multiple inputs and a calculation portion.
The general formula that R uses is:
`CI95 <- qt(0.975,df=n-1)*Sd/sqrt(n)`
In most cases for chem 101 you will want to use 0.975 for the first input into the function
###Exercise 25.
Calculate the confidence interval for Iron using Iron_n and Iron_sd
```{r Iron_CI, exercise=TRUE, exercise.setup="Ironset"}
CI95 <-
CI95
```
Once finished, check your answer against the solution and **Run Code**
```{r Iron_CI-solution}
CI95 <- qt(0.975,df=Iron_n-1)*Iron_sd/sqrt(Iron_n)
CI95
```
```{r sigthree}
question("How many sig figs should confidence intervals have?",
answer("Depends on the precision of the instruments", message="No this is not the case for error."),
answer("2", message = "No, 2 sig figs is the rule for RSD not CI. CI is a way of recording error, try again."),
answer("1", correct=TRUE,message="Great Job, CI falls under error rules and only has 1 sig fig."),
random_answer_order = TRUE,
allow_retry = TRUE)
```
## 9.0 Using Files in R
This chapter will explain the final pieces of the puzzle that will allow you to complete assignments in R instead of inside interactive code chunks.
##9.1 RScript.
RScripts are a type of file made entirely of code and comments.
They are most useful when you are trying to write code that will remain in R. This type of R file isn't frequently used in introductory courses since often the primary objective is to create a well formatted output.
Coding in RScripts can be useful for you if you have previous coding experience since the file will look similar to files you will have seen in other languages.
##9.2 RNotebook.
RNotebooks are a type of file with code chunks that can be executed independently and interactively. When you execute code within the notebook, the results appear beneath the code.
They are a relatively new feature of R and are not currently used in Chem 101 and Chem 102.
##9.3 RMarkdown.
RMarkdown is the file type of choice for general chemistry at Reed. Primarily because RMarkdown files allow you to load a previously made template.
Templates are useful because Danielle can write lab report instructions into R that you can add your data to. Templates also help make a consistent output, which is great because it allows you to focus on the data analysis without worrying about how it will look.
RMarkdown files are also great because they allow you to write text that will be formatted alongside your code outputs when `knitted` into a word document.
###9.3.1 YAML.
YAML is the name for the header of an RMarkdown document.
It is parsed by R and will instruct the format in which the file will be exported to. Primarily the output we use is `chemistr::chem_lab_word`, this is an output designed and modified by Reed that creates lab reports in word.
This is an example of a YAML header:
`---`
`title: "Gram Atomic Weight of Magnesium"  `
`author: "Author Name" `
`date: "Date"    `
`output: chemistr::chem_lab_word     `
`---`
**When Modifying a YAML header for gen chem only change the Name, Date, and Title sections. Make sure that these sections stay in quotation marks.**
###9.3.2 Code Chunks
Code chunks were previously discussed in chapter 2 so we won't go into much detail here.
The main thing to know is how to identify and create a code chunk.
Code chunks are opened by a line of code with ` ```{r} `
and are closed by a line of code with `  ```   `.
Inside these two lines, R will parse the text.
A fast way to create a code chunk is to click the **insert** button at the top of the code editor and then click **R**.
Another thing to note about code chunks is that you can add designations to the label that will tell R to do certain things.
For example. `{r, echo= TRUE}` will mirror the code inside the chunk into the output. Generally, we want echo set to FALSE instead.
###9.3.3 Setup
The setup portion of a document is a chunk of code that is generally labeled ```{r setup} and contains the library loading functions.
**Make sure that your setup chunk contains** `library(chemistr)`
###9.3.4 Writing text in R.
Writing text in R occurs outside of code chunks. Treat text similarly to how you would type in a word document.
R text syntax is different from the previously discussed R code syntax.
Here is a cool reference on how to use R text syntax.
https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf
Some main points from the reference sheets are:
- In order to create separate paragraphs of text, you must hit enter twice.
- In order to separate lines of text add two or more spaces to the end of the line.
- Creating headers can be done using pound signs at the start of a line.
- Surrounding a word in asterisks will italicize it, double asterisks will bold it.
- Three asterisks in a row will create a horizontal line.
###9.3.5 Knitting.
Knitting is how you export an R file into a non-R format. For general chemistry, we will be knitting our files into word.
In order to knit the code click the button that says **knit** with a little bar of yarn.
##10.0 Using RStudio
This final chapter should help you take the skills you have started to develop and apply them to writing code in RStudio.
##10.1 RStudio Setup
The four pieces that you will see when you open RStudio are:
- The console.
- The Environment.
- The Files.
- The Code Editor.
These are not official names, rather terms that will hopefully help you recognize the parts.
When opening R for the first time you will not see the code editor. In order to access the code editor, you will have to open a file.
##10.2 The Reed Server
For our work in Intro Chem, we will work on Reed's RStudio Server. This will allow everyone to work in a shared space and remove any issues with installing software onto a personal computer.
Note: the IRC computers have R and RStudio installed, and you can download and install R and RStudio to your own computer for free. Folks at the CUS help desk can help with software installation issues/questions.
###10.2.1 Logging in and Initial Screen
In order to access the RStudio Server follow this link: https://rstudio.reed.edu/auth-sign-in
Log in using your Reed College (Kerberos) https://www.reed.edu/cis/help/kerberos.html#reed username and password
###10.2.2 Sharing Projects
The shared project feature of the RStudio Server will come in handy for lab reports since those will primarily be completed in groups of two.
In order to share a project click **File**, **Share Project...**
The window that pops up will appear blank for a few minutes, this is not an error. R has to process a lot of information in order to share a project and it takes a while to load.
When the window loads you will be able to search for people using their Kerberos username.
To access a shared project click **File** **Open Project** and when the window pops up click **Shared with me**
####**Warning**
R is not set up the same way as programs like Google drive. Use extreme caution when working on a shared project.
- Meet with your lab partner in person and only work on one computer at a time.
- If using separate computers work at different times and make sure to exit out of R when you are finished working.
- Communicate with your lab partner to figure out when they plan on working and schedule the time you will work on the lab reports.
R will overwrite code that one person has written if another person saves an earlier version of the document after the first person has saved and exited R. This can lead to large amounts of code getting deleted.
##10.3 Errors
When inevitably you see your first R error here are some steps you can take to resolve the issue.
1. *(Read through your code and try Running it again. *
- Often errors are a small mistake that are hard to notice right away, such as a missing comma.
2. *Have your lab partner or another member of the class read through your code. *
- The more eyes, the more likely someone will catch the error.
- R errors happen to everyone, it is not an indication of your programming capabilities.
- Talking with classmates will help you improve
- Chances are if you are having an error someone else is having the same error.
3. *Try using the help function to make sure that you are correctly using the functions.*
- To do this type `?functionname()` into the console and run it.
4.* Google the error. *
- With more complicated errors this can be really helpful.
5. *Talk to Danielle.*
- Danielle is a great resource for small R errors.
- Danielle should not be your only method of getting help but she is a really great resource.
6. *Go to drop in tutoring *
- Drop-in tutoring is great because there are multiple tutors at once and can collaborate to help solve the error.
7. *Schedule an individual tutoring appointment*
- Individual tutoring is free and extremely useful!
- Schedule individual tutoring appointments through Iris.
8.* Talk to the Chemistry Student Technology Assistant*
9. *If all else fails reach out to Kbott.*
- Kbott is Reed's current R person.
- She is a great resource but has to deal with a lot of students, try to use other resources first.
- If you want to improve your R skills Kbott can help you register for data camp courses that are not chemistry specific but really helpful!
##Assessment Quiz
The following assessment needs to be completed before coming to lab the week of **September 17th, 2018**.
Do not complete the quiz prior to reading the chapters. You may refer back to the chapters if needed, but you may not collaborate on the quiz. Please email dcass@reed.edu and vestoj@reed.edu if there are any technical issues with the assignment.
##Quiz
###Question 1.
For the first question input the following data into R; using the concatenate and `data.frame()` functions.
```{r, echo=FALSE, results="asis"}
Iron <- c(0,.717,1.43,3.5,7.17)
Iron_data <- data.frame(Iron)
chem_table(Iron_data, caption="")
```
Once inputted, create a table with the statistics (n, mean, and sd) of the data set.
1. Start this problem by creating and naming a vector that includes the 5 data points.
2. convert the vector into a data frame using the `data.frame()` function.
3. Use the `length()`,` mean()`, and `sd()` functions to calculate the statistics.
4. Create a data frame with the 3 statistic vectors.
5. use the `chem_table()` function to create a table of the dataframe
```{r statsfinalquiz, exercise=TRUE}
```
###Question 2.
```{r, results="asis"}
Iron <- c(0,.717,1.43,3.5,7.17)
Absorbance <- c(0,.085,0.17,0.41,0.85)
Iron_dataframe <- data.frame(Iron, Absorbance)
chem_table(Iron_dataframe, caption="For the next question insert the following data into R and create a graph and then extract data from the fit. ")
```
1. Create a list of Iron data points.
- *Hint: use the concatenate function. *
2. Create a list of Absorbance data points.
3. Combine the two lists into a dataframe.
- *Hint: use the data.frame() function. *
4. Create a scatter plot.
- *Hint: use the following template...*
chem_scatter(data =  ,
xvar =  ,
yvar =  ,
xlab = "[Iron](µM)",
ylab = "Absorbance at 508 nm",
intercept = 0)
5. Extract the fit from the scatter plot.
- *Hint: use the  `lm(yvar ~ xvar + 0, data = )` function*
- *Make sure to assign the fit to a vector*.
6. Summarize the fit of the line.
- *Hint: use the `summary()` function.*
```{r graphsfinalquiz, exercise=TRUE}
```
###Question 3.
```{r finalquizsigfigs}
question("Check all answers that should be recorded in 2 significant figures",
answer("2.1 * 3.54", correct=TRUE),
answer("23 + 21.2", correct = TRUE),
answer("log(2.3*10^(-2))", correct=TRUE),
answer("95% CI"),
answer("RSD", correct=TRUE),
answer("SD"), random_answer_order=TRUE)
```
###Question 4
Your next task is to correct the following chunk of code in order to get it to run and print the data below.
*Warning R errors are sometimes hard to read, pay attention to the code more than the error messages.*
```{r error_question, exercise=TRUE}
Iron Molarity data-> c(0 M 7.17E-6 M  1.43E-5 M 3.5E-5 M 7.17E-5 M),
iron molarity data
```
### Question 5
Do you feel confident starting to use R after completing this workbook, yes, no, or not_sure? (type exactly as written)
```{r confidencefinalquiz-setup}
yes <- "Great! If you feel overwhelmed by R anytime in the future semesters you can always refer back to this workbook, or the accompanying lab book."
not_sure <- "That's okay! Starting to code in a new language is a challenge no matter your previous experience. Hopefully, this was a good start to understanding R and you can always refer back to this workbook or accompanying lab book if you run into challenges."
no <-  "Hopefully this was a good start to understanding coding anyway! Try reaching out to dcass@reed.edu, swartzn@reed.edu, vestoj@reed.edu if you are worried. There are so many resources at Reed that can help you develop this new skill. You can always refer back to this workbook or accompanying lab book if you run into challenges."
```
```{r confidencefinalquiz, exercise=TRUE}
```
##Final Section
Great Job! You have officially completed the workbook, make sure you screenshot the outputs from the quiz questions and upload them onto Moodle or print them and glue them into your lab notebook for future reference.
devtools::install_github("dtkaplan/checkr")
devtools::install_github("dtkaplan/checkr")
---
devtools::install_github("dtkaplan/checkr")
library(tidyverse)
devtools::install_github("dtkaplan/checkr")
source("../R/check_blanks.R", local = knitr::knit_global())
source("R/check_blanks.R", local = knitr::knit_global())
source("R/check_blanks.R", local = knitr::knit_global())
source("R/check_for_learnr", local = knitr::knit_global())
source("R/for_checkr.R", local = knitr::knit_global())
source("R/check_for_learnr.R", local = knitr::knit_global())
source("R/for_checkr.R", local = knitr::knit_global())
source("R/line_where.R", local = knitr::knit_global())
source("R/passif.R", local = knitr::knit_global())
source("R/generic", local = knitr::knit_global())
source("R/generic.R", local = knitr::knit_global())
source("R/line_where.R", local = knitr::knit_global())
source("R/passif.R", local = knitr::knit_global())
library(shiny)
library(devtools)
library(chemistr)
library(learnr)
library(redpen)
source("R/check_blanks.R", local = knitr::knit_global())
source("R/check_for_learnr.R", local = knitr::knit_global())
source("R/for_checkr.R", local = knitr::knit_global())
source("R/line_where.R", local = knitr::knit_global())
source("R/passif.R", local = knitr::knit_global())
devtools::install_github("lionel-/redpen")
force = TRUE
devtools::install_github("lionel-/redpen", force=TRUE)
source("R/passif.R", local = knitr::knit_global())
source("R/helpers.R", local = knitr::knit_global())
source("R/check_blanks.R", local = knitr::knit_global())
source("R/check_for_learnr.R", local = knitr::knit_global())
source("R/for_checkr.R", local = knitr::knit_global())
source("R/line_where.R", local = knitr::knit_global())
source("R/passif.R", local = knitr::knit_global())
#devtools::install_github("lionel-/redpen")
library(shiny)
library(devtools)
library(chemistr)
library(learnr)
#devtools::install_github("lionel-/redpen")
library(shiny)
library(devtools)
#library(chemistr)
library(learnr)
#library(redpen)
#library(checkr)
#functions from dtkaplan's checkr
source("R/helpers.R", local = knitr::knit_global())
source("R/check_blanks.R", local = knitr::knit_global())
source("R/check_for_learnr.R", local = knitr::knit_global())
source("R/for_checkr.R", local = knitr::knit_global())
source("R/line_where.R", local = knitr::knit_global())
source("R/passif.R", local = knitr::knit_global())
#functions from chemistr
source("R/chem_scatter.R", local = knitr::knit_global())
source("R/chem_table.R", local = knitr::knit_global())
knitr::opts_chunk$set(echo = FALSE)
tutorial_options(exercise.checker = checkr::check_for_learnr)
tutorial_options(exercise.checker = check_for_learnr)
source("R/helpers.R", local = knitr::knit_global())
source("R/check_blanks.R", local = knitr::knit_global())
#devtools::install_github("lionel-/redpen")
library(shiny)
